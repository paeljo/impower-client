# coding: utf-8

"""
    Impower ERP

     # Setup  Enquire a `Bearer Token` from Api Support  # Authentication  Use API calls with an `Authorization: Bearer TOKEN` header  # Webhooks  The application supports sending secured notification events to registered endpoints.  The events one may receive are sent as  ``` POST https://your.webhook.url/path/somewhere Authorization: Bearer TOKEN  {   \"connectionId\": 0,   \"entityType\": \"properties|contacts|invoices|etc.\",   \"entityId\": 0,   \"eventType\": \"CREATE|UPDATE|DELETE\" } ```  <!-- Style overrides --> <style> code {   display: block; } </style>   # noqa: E501

    OpenAPI spec version: 2.201.52181d67
    Contact: support+api@impower.de
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DocumentUpdateDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'building_id': 'int',
        'contact_id': 'int',
        'contract_id': 'int',
        'id': 'int',
        'issued_date': 'str',
        'name': 'str',
        'property_id': 'int',
        'source_id': 'int',
        'tag_ids': 'list[int]',
        'unit_id': 'int'
    }

    attribute_map = {
        'amount': 'amount',
        'building_id': 'buildingId',
        'contact_id': 'contactId',
        'contract_id': 'contractId',
        'id': 'id',
        'issued_date': 'issuedDate',
        'name': 'name',
        'property_id': 'propertyId',
        'source_id': 'sourceId',
        'tag_ids': 'tagIds',
        'unit_id': 'unitId'
    }

    def __init__(self, amount=None, building_id=None, contact_id=None, contract_id=None, id=None, issued_date=None, name=None, property_id=None, source_id=None, tag_ids=None, unit_id=None):  # noqa: E501
        """DocumentUpdateDto - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._building_id = None
        self._contact_id = None
        self._contract_id = None
        self._id = None
        self._issued_date = None
        self._name = None
        self._property_id = None
        self._source_id = None
        self._tag_ids = None
        self._unit_id = None
        self.discriminator = None
        if amount is not None:
            self.amount = amount
        if building_id is not None:
            self.building_id = building_id
        if contact_id is not None:
            self.contact_id = contact_id
        if contract_id is not None:
            self.contract_id = contract_id
        self.id = id
        if issued_date is not None:
            self.issued_date = issued_date
        if name is not None:
            self.name = name
        if property_id is not None:
            self.property_id = property_id
        if source_id is not None:
            self.source_id = source_id
        if tag_ids is not None:
            self.tag_ids = tag_ids
        if unit_id is not None:
            self.unit_id = unit_id

    @property
    def amount(self):
        """Gets the amount of this DocumentUpdateDto.  # noqa: E501

        New value the document amount to be updated to  # noqa: E501

        :return: The amount of this DocumentUpdateDto.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this DocumentUpdateDto.

        New value the document amount to be updated to  # noqa: E501

        :param amount: The amount of this DocumentUpdateDto.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def building_id(self):
        """Gets the building_id of this DocumentUpdateDto.  # noqa: E501

        New building building the document to be assigned to.  # noqa: E501

        :return: The building_id of this DocumentUpdateDto.  # noqa: E501
        :rtype: int
        """
        return self._building_id

    @building_id.setter
    def building_id(self, building_id):
        """Sets the building_id of this DocumentUpdateDto.

        New building building the document to be assigned to.  # noqa: E501

        :param building_id: The building_id of this DocumentUpdateDto.  # noqa: E501
        :type: int
        """

        self._building_id = building_id

    @property
    def contact_id(self):
        """Gets the contact_id of this DocumentUpdateDto.  # noqa: E501

        New contact the document to be assigned to  # noqa: E501

        :return: The contact_id of this DocumentUpdateDto.  # noqa: E501
        :rtype: int
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this DocumentUpdateDto.

        New contact the document to be assigned to  # noqa: E501

        :param contact_id: The contact_id of this DocumentUpdateDto.  # noqa: E501
        :type: int
        """

        self._contact_id = contact_id

    @property
    def contract_id(self):
        """Gets the contract_id of this DocumentUpdateDto.  # noqa: E501

        New contract the document to be assigned to  # noqa: E501

        :return: The contract_id of this DocumentUpdateDto.  # noqa: E501
        :rtype: int
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this DocumentUpdateDto.

        New contract the document to be assigned to  # noqa: E501

        :param contract_id: The contract_id of this DocumentUpdateDto.  # noqa: E501
        :type: int
        """

        self._contract_id = contract_id

    @property
    def id(self):
        """Gets the id of this DocumentUpdateDto.  # noqa: E501

        The unique identifier of the document to be updated  # noqa: E501

        :return: The id of this DocumentUpdateDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DocumentUpdateDto.

        The unique identifier of the document to be updated  # noqa: E501

        :param id: The id of this DocumentUpdateDto.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def issued_date(self):
        """Gets the issued_date of this DocumentUpdateDto.  # noqa: E501

        New date the document issued date to be updated to  # noqa: E501

        :return: The issued_date of this DocumentUpdateDto.  # noqa: E501
        :rtype: str
        """
        return self._issued_date

    @issued_date.setter
    def issued_date(self, issued_date):
        """Sets the issued_date of this DocumentUpdateDto.

        New date the document issued date to be updated to  # noqa: E501

        :param issued_date: The issued_date of this DocumentUpdateDto.  # noqa: E501
        :type: str
        """

        self._issued_date = issued_date

    @property
    def name(self):
        """Gets the name of this DocumentUpdateDto.  # noqa: E501

        New value the document name to be updated to  # noqa: E501

        :return: The name of this DocumentUpdateDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DocumentUpdateDto.

        New value the document name to be updated to  # noqa: E501

        :param name: The name of this DocumentUpdateDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def property_id(self):
        """Gets the property_id of this DocumentUpdateDto.  # noqa: E501

        New property the document to be assigned to  # noqa: E501

        :return: The property_id of this DocumentUpdateDto.  # noqa: E501
        :rtype: int
        """
        return self._property_id

    @property_id.setter
    def property_id(self, property_id):
        """Sets the property_id of this DocumentUpdateDto.

        New property the document to be assigned to  # noqa: E501

        :param property_id: The property_id of this DocumentUpdateDto.  # noqa: E501
        :type: int
        """

        self._property_id = property_id

    @property
    def source_id(self):
        """Gets the source_id of this DocumentUpdateDto.  # noqa: E501

        New source process id the document to be assigned to  # noqa: E501

        :return: The source_id of this DocumentUpdateDto.  # noqa: E501
        :rtype: int
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this DocumentUpdateDto.

        New source process id the document to be assigned to  # noqa: E501

        :param source_id: The source_id of this DocumentUpdateDto.  # noqa: E501
        :type: int
        """

        self._source_id = source_id

    @property
    def tag_ids(self):
        """Gets the tag_ids of this DocumentUpdateDto.  # noqa: E501

        Identifiers of tags to be assigned to the document  # noqa: E501

        :return: The tag_ids of this DocumentUpdateDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._tag_ids

    @tag_ids.setter
    def tag_ids(self, tag_ids):
        """Sets the tag_ids of this DocumentUpdateDto.

        Identifiers of tags to be assigned to the document  # noqa: E501

        :param tag_ids: The tag_ids of this DocumentUpdateDto.  # noqa: E501
        :type: list[int]
        """

        self._tag_ids = tag_ids

    @property
    def unit_id(self):
        """Gets the unit_id of this DocumentUpdateDto.  # noqa: E501

        New unit the document to be assigned to  # noqa: E501

        :return: The unit_id of this DocumentUpdateDto.  # noqa: E501
        :rtype: int
        """
        return self._unit_id

    @unit_id.setter
    def unit_id(self, unit_id):
        """Sets the unit_id of this DocumentUpdateDto.

        New unit the document to be assigned to  # noqa: E501

        :param unit_id: The unit_id of this DocumentUpdateDto.  # noqa: E501
        :type: int
        """

        self._unit_id = unit_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocumentUpdateDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentUpdateDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
