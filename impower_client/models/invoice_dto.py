# coding: utf-8

"""
    Impower ERP

     # Setup  Enquire a `Bearer Token` from Api Support  # Authentication  Use API calls with an `Authorization: Bearer TOKEN` header  # Webhooks  The application supports sending secured notification events to registered endpoints.  The events one may receive are sent as  ``` POST https://your.webhook.url/path/somewhere Authorization: Bearer TOKEN  {   \"connectionId\": 0,   \"entityType\": \"properties|contacts|invoices|etc.\",   \"entityId\": 0,   \"eventType\": \"CREATE|UPDATE|DELETE\" } ```  <!-- Style overrides --> <style> code {   display: block; } </style>   # noqa: E501

    OpenAPI spec version: 2.201.52181d67
    Contact: support+api@impower.de
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InvoiceDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'counterpart_contact_id': 'int',
        'counterpart_contact_name': 'str',
        'created': 'datetime',
        'id': 'int',
        'issued_date': 'str',
        'items': 'list[InvoiceItemDto]',
        'name': 'str',
        'order_counterpart_bic': 'str',
        'order_counterpart_iban': 'str',
        'order_day_offset': 'int',
        'order_property_bank_account_id': 'int',
        'order_property_bic': 'str',
        'order_property_iban': 'str',
        'order_required': 'bool',
        'order_statement': 'str',
        'property_hr_id': 'str',
        'property_id': 'int',
        'property_name': 'str',
        'state': 'str',
        'updated': 'datetime'
    }

    attribute_map = {
        'amount': 'amount',
        'counterpart_contact_id': 'counterpartContactId',
        'counterpart_contact_name': 'counterpartContactName',
        'created': 'created',
        'id': 'id',
        'issued_date': 'issuedDate',
        'items': 'items',
        'name': 'name',
        'order_counterpart_bic': 'orderCounterpartBic',
        'order_counterpart_iban': 'orderCounterpartIban',
        'order_day_offset': 'orderDayOffset',
        'order_property_bank_account_id': 'orderPropertyBankAccountId',
        'order_property_bic': 'orderPropertyBic',
        'order_property_iban': 'orderPropertyIban',
        'order_required': 'orderRequired',
        'order_statement': 'orderStatement',
        'property_hr_id': 'propertyHrId',
        'property_id': 'propertyId',
        'property_name': 'propertyName',
        'state': 'state',
        'updated': 'updated'
    }

    def __init__(self, amount=None, counterpart_contact_id=None, counterpart_contact_name=None, created=None, id=None, issued_date=None, items=None, name=None, order_counterpart_bic=None, order_counterpart_iban=None, order_day_offset=None, order_property_bank_account_id=None, order_property_bic=None, order_property_iban=None, order_required=None, order_statement=None, property_hr_id=None, property_id=None, property_name=None, state=None, updated=None):  # noqa: E501
        """InvoiceDto - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._counterpart_contact_id = None
        self._counterpart_contact_name = None
        self._created = None
        self._id = None
        self._issued_date = None
        self._items = None
        self._name = None
        self._order_counterpart_bic = None
        self._order_counterpart_iban = None
        self._order_day_offset = None
        self._order_property_bank_account_id = None
        self._order_property_bic = None
        self._order_property_iban = None
        self._order_required = None
        self._order_statement = None
        self._property_hr_id = None
        self._property_id = None
        self._property_name = None
        self._state = None
        self._updated = None
        self.discriminator = None
        if amount is not None:
            self.amount = amount
        if counterpart_contact_id is not None:
            self.counterpart_contact_id = counterpart_contact_id
        if counterpart_contact_name is not None:
            self.counterpart_contact_name = counterpart_contact_name
        if created is not None:
            self.created = created
        if id is not None:
            self.id = id
        if issued_date is not None:
            self.issued_date = issued_date
        if items is not None:
            self.items = items
        if name is not None:
            self.name = name
        if order_counterpart_bic is not None:
            self.order_counterpart_bic = order_counterpart_bic
        if order_counterpart_iban is not None:
            self.order_counterpart_iban = order_counterpart_iban
        if order_day_offset is not None:
            self.order_day_offset = order_day_offset
        if order_property_bank_account_id is not None:
            self.order_property_bank_account_id = order_property_bank_account_id
        if order_property_bic is not None:
            self.order_property_bic = order_property_bic
        if order_property_iban is not None:
            self.order_property_iban = order_property_iban
        if order_required is not None:
            self.order_required = order_required
        if order_statement is not None:
            self.order_statement = order_statement
        if property_hr_id is not None:
            self.property_hr_id = property_hr_id
        if property_id is not None:
            self.property_id = property_id
        if property_name is not None:
            self.property_name = property_name
        if state is not None:
            self.state = state
        if updated is not None:
            self.updated = updated

    @property
    def amount(self):
        """Gets the amount of this InvoiceDto.  # noqa: E501

        Amount to be payed according to the invoice.  # noqa: E501

        :return: The amount of this InvoiceDto.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InvoiceDto.

        Amount to be payed according to the invoice.  # noqa: E501

        :param amount: The amount of this InvoiceDto.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def counterpart_contact_id(self):
        """Gets the counterpart_contact_id of this InvoiceDto.  # noqa: E501

        ID of the counterpart contact of the invoice.  # noqa: E501

        :return: The counterpart_contact_id of this InvoiceDto.  # noqa: E501
        :rtype: int
        """
        return self._counterpart_contact_id

    @counterpart_contact_id.setter
    def counterpart_contact_id(self, counterpart_contact_id):
        """Sets the counterpart_contact_id of this InvoiceDto.

        ID of the counterpart contact of the invoice.  # noqa: E501

        :param counterpart_contact_id: The counterpart_contact_id of this InvoiceDto.  # noqa: E501
        :type: int
        """

        self._counterpart_contact_id = counterpart_contact_id

    @property
    def counterpart_contact_name(self):
        """Gets the counterpart_contact_name of this InvoiceDto.  # noqa: E501

        Name of the counterpart contact of the invoice.  # noqa: E501

        :return: The counterpart_contact_name of this InvoiceDto.  # noqa: E501
        :rtype: str
        """
        return self._counterpart_contact_name

    @counterpart_contact_name.setter
    def counterpart_contact_name(self, counterpart_contact_name):
        """Sets the counterpart_contact_name of this InvoiceDto.

        Name of the counterpart contact of the invoice.  # noqa: E501

        :param counterpart_contact_name: The counterpart_contact_name of this InvoiceDto.  # noqa: E501
        :type: str
        """

        self._counterpart_contact_name = counterpart_contact_name

    @property
    def created(self):
        """Gets the created of this InvoiceDto.  # noqa: E501

        Creation time of the invoice.  # noqa: E501

        :return: The created of this InvoiceDto.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this InvoiceDto.

        Creation time of the invoice.  # noqa: E501

        :param created: The created of this InvoiceDto.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def id(self):
        """Gets the id of this InvoiceDto.  # noqa: E501

        ID of the invoice.  # noqa: E501

        :return: The id of this InvoiceDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InvoiceDto.

        ID of the invoice.  # noqa: E501

        :param id: The id of this InvoiceDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def issued_date(self):
        """Gets the issued_date of this InvoiceDto.  # noqa: E501

        Issued date of the invoice.  # noqa: E501

        :return: The issued_date of this InvoiceDto.  # noqa: E501
        :rtype: str
        """
        return self._issued_date

    @issued_date.setter
    def issued_date(self, issued_date):
        """Sets the issued_date of this InvoiceDto.

        Issued date of the invoice.  # noqa: E501

        :param issued_date: The issued_date of this InvoiceDto.  # noqa: E501
        :type: str
        """

        self._issued_date = issued_date

    @property
    def items(self):
        """Gets the items of this InvoiceDto.  # noqa: E501


        :return: The items of this InvoiceDto.  # noqa: E501
        :rtype: list[InvoiceItemDto]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this InvoiceDto.


        :param items: The items of this InvoiceDto.  # noqa: E501
        :type: list[InvoiceItemDto]
        """

        self._items = items

    @property
    def name(self):
        """Gets the name of this InvoiceDto.  # noqa: E501

        Name of the invoice.  # noqa: E501

        :return: The name of this InvoiceDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InvoiceDto.

        Name of the invoice.  # noqa: E501

        :param name: The name of this InvoiceDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def order_counterpart_bic(self):
        """Gets the order_counterpart_bic of this InvoiceDto.  # noqa: E501

        BIC number of the counterpart's bank account.  # noqa: E501

        :return: The order_counterpart_bic of this InvoiceDto.  # noqa: E501
        :rtype: str
        """
        return self._order_counterpart_bic

    @order_counterpart_bic.setter
    def order_counterpart_bic(self, order_counterpart_bic):
        """Sets the order_counterpart_bic of this InvoiceDto.

        BIC number of the counterpart's bank account.  # noqa: E501

        :param order_counterpart_bic: The order_counterpart_bic of this InvoiceDto.  # noqa: E501
        :type: str
        """

        self._order_counterpart_bic = order_counterpart_bic

    @property
    def order_counterpart_iban(self):
        """Gets the order_counterpart_iban of this InvoiceDto.  # noqa: E501

        IBAN of the counterpart's bank account.  # noqa: E501

        :return: The order_counterpart_iban of this InvoiceDto.  # noqa: E501
        :rtype: str
        """
        return self._order_counterpart_iban

    @order_counterpart_iban.setter
    def order_counterpart_iban(self, order_counterpart_iban):
        """Sets the order_counterpart_iban of this InvoiceDto.

        IBAN of the counterpart's bank account.  # noqa: E501

        :param order_counterpart_iban: The order_counterpart_iban of this InvoiceDto.  # noqa: E501
        :type: str
        """

        self._order_counterpart_iban = order_counterpart_iban

    @property
    def order_day_offset(self):
        """Gets the order_day_offset of this InvoiceDto.  # noqa: E501

        The number of days before or after the booking date where the bank order shall appear for execution.  # noqa: E501

        :return: The order_day_offset of this InvoiceDto.  # noqa: E501
        :rtype: int
        """
        return self._order_day_offset

    @order_day_offset.setter
    def order_day_offset(self, order_day_offset):
        """Sets the order_day_offset of this InvoiceDto.

        The number of days before or after the booking date where the bank order shall appear for execution.  # noqa: E501

        :param order_day_offset: The order_day_offset of this InvoiceDto.  # noqa: E501
        :type: int
        """

        self._order_day_offset = order_day_offset

    @property
    def order_property_bank_account_id(self):
        """Gets the order_property_bank_account_id of this InvoiceDto.  # noqa: E501

        Unique identifier of the bank account of the property.  # noqa: E501

        :return: The order_property_bank_account_id of this InvoiceDto.  # noqa: E501
        :rtype: int
        """
        return self._order_property_bank_account_id

    @order_property_bank_account_id.setter
    def order_property_bank_account_id(self, order_property_bank_account_id):
        """Sets the order_property_bank_account_id of this InvoiceDto.

        Unique identifier of the bank account of the property.  # noqa: E501

        :param order_property_bank_account_id: The order_property_bank_account_id of this InvoiceDto.  # noqa: E501
        :type: int
        """

        self._order_property_bank_account_id = order_property_bank_account_id

    @property
    def order_property_bic(self):
        """Gets the order_property_bic of this InvoiceDto.  # noqa: E501

        BIC number of the property bank account.  # noqa: E501

        :return: The order_property_bic of this InvoiceDto.  # noqa: E501
        :rtype: str
        """
        return self._order_property_bic

    @order_property_bic.setter
    def order_property_bic(self, order_property_bic):
        """Sets the order_property_bic of this InvoiceDto.

        BIC number of the property bank account.  # noqa: E501

        :param order_property_bic: The order_property_bic of this InvoiceDto.  # noqa: E501
        :type: str
        """

        self._order_property_bic = order_property_bic

    @property
    def order_property_iban(self):
        """Gets the order_property_iban of this InvoiceDto.  # noqa: E501

        IBAN of the property bank account.  # noqa: E501

        :return: The order_property_iban of this InvoiceDto.  # noqa: E501
        :rtype: str
        """
        return self._order_property_iban

    @order_property_iban.setter
    def order_property_iban(self, order_property_iban):
        """Sets the order_property_iban of this InvoiceDto.

        IBAN of the property bank account.  # noqa: E501

        :param order_property_iban: The order_property_iban of this InvoiceDto.  # noqa: E501
        :type: str
        """

        self._order_property_iban = order_property_iban

    @property
    def order_required(self):
        """Gets the order_required of this InvoiceDto.  # noqa: E501

        True in case there is a corresponding order of the invoice.  # noqa: E501

        :return: The order_required of this InvoiceDto.  # noqa: E501
        :rtype: bool
        """
        return self._order_required

    @order_required.setter
    def order_required(self, order_required):
        """Sets the order_required of this InvoiceDto.

        True in case there is a corresponding order of the invoice.  # noqa: E501

        :param order_required: The order_required of this InvoiceDto.  # noqa: E501
        :type: bool
        """

        self._order_required = order_required

    @property
    def order_statement(self):
        """Gets the order_statement of this InvoiceDto.  # noqa: E501

        Statement of the generated order.  # noqa: E501

        :return: The order_statement of this InvoiceDto.  # noqa: E501
        :rtype: str
        """
        return self._order_statement

    @order_statement.setter
    def order_statement(self, order_statement):
        """Sets the order_statement of this InvoiceDto.

        Statement of the generated order.  # noqa: E501

        :param order_statement: The order_statement of this InvoiceDto.  # noqa: E501
        :type: str
        """

        self._order_statement = order_statement

    @property
    def property_hr_id(self):
        """Gets the property_hr_id of this InvoiceDto.  # noqa: E501

        Human readable id of the property the invoice belongs to.  # noqa: E501

        :return: The property_hr_id of this InvoiceDto.  # noqa: E501
        :rtype: str
        """
        return self._property_hr_id

    @property_hr_id.setter
    def property_hr_id(self, property_hr_id):
        """Sets the property_hr_id of this InvoiceDto.

        Human readable id of the property the invoice belongs to.  # noqa: E501

        :param property_hr_id: The property_hr_id of this InvoiceDto.  # noqa: E501
        :type: str
        """

        self._property_hr_id = property_hr_id

    @property
    def property_id(self):
        """Gets the property_id of this InvoiceDto.  # noqa: E501

        ID of the property the invoice belongs to.  # noqa: E501

        :return: The property_id of this InvoiceDto.  # noqa: E501
        :rtype: int
        """
        return self._property_id

    @property_id.setter
    def property_id(self, property_id):
        """Sets the property_id of this InvoiceDto.

        ID of the property the invoice belongs to.  # noqa: E501

        :param property_id: The property_id of this InvoiceDto.  # noqa: E501
        :type: int
        """

        self._property_id = property_id

    @property
    def property_name(self):
        """Gets the property_name of this InvoiceDto.  # noqa: E501

        Name of the property the invoice belongs to.  # noqa: E501

        :return: The property_name of this InvoiceDto.  # noqa: E501
        :rtype: str
        """
        return self._property_name

    @property_name.setter
    def property_name(self, property_name):
        """Sets the property_name of this InvoiceDto.

        Name of the property the invoice belongs to.  # noqa: E501

        :param property_name: The property_name of this InvoiceDto.  # noqa: E501
        :type: str
        """

        self._property_name = property_name

    @property
    def state(self):
        """Gets the state of this InvoiceDto.  # noqa: E501

        State of the invoice. Possible values:  1. DRAFT - invoice created, but incomplete.  2. READY - invoice ready to be booked.  3. BOOKED - invoice booked.  4. SCHEDULED - only applies to recurring invoices.  5. REVERSED - all bookings generated by the invoice have been reversed.  # noqa: E501

        :return: The state of this InvoiceDto.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InvoiceDto.

        State of the invoice. Possible values:  1. DRAFT - invoice created, but incomplete.  2. READY - invoice ready to be booked.  3. BOOKED - invoice booked.  4. SCHEDULED - only applies to recurring invoices.  5. REVERSED - all bookings generated by the invoice have been reversed.  # noqa: E501

        :param state: The state of this InvoiceDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["DRAFT", "READY", "BOOKED", "SCHEDULED", "REVERSED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def updated(self):
        """Gets the updated of this InvoiceDto.  # noqa: E501

        Last update time of the invoice.  # noqa: E501

        :return: The updated of this InvoiceDto.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this InvoiceDto.

        Last update time of the invoice.  # noqa: E501

        :param updated: The updated of this InvoiceDto.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvoiceDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoiceDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
