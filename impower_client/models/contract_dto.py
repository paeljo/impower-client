# coding: utf-8

"""
    Impower ERP

     # Setup  Enquire a `Bearer Token` from Api Support  # Authentication  Use API calls with an `Authorization: Bearer TOKEN` header  # Webhooks  The application supports sending secured notification events to registered endpoints.  The events one may receive are sent as  ``` POST https://your.webhook.url/path/somewhere Authorization: Bearer TOKEN  {   \"connectionId\": 0,   \"entityType\": \"properties|contacts|invoices|etc.\",   \"entityId\": 0,   \"eventType\": \"CREATE|UPDATE|DELETE\" } ```  <!-- Style overrides --> <style> code {   display: block; } </style>   # noqa: E501

    OpenAPI spec version: 2.201.52181d67
    Contact: support+api@impower.de
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContractDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contacts': 'list[ContactSimpleDto]',
        'contract_number': 'str',
        'created': 'datetime',
        'end_date': 'str',
        'id': 'int',
        'name': 'str',
        'property_id': 'int',
        'start_date': 'str',
        'type': 'str',
        'unit_id': 'int',
        'updated': 'datetime'
    }

    attribute_map = {
        'contacts': 'contacts',
        'contract_number': 'contractNumber',
        'created': 'created',
        'end_date': 'endDate',
        'id': 'id',
        'name': 'name',
        'property_id': 'propertyId',
        'start_date': 'startDate',
        'type': 'type',
        'unit_id': 'unitId',
        'updated': 'updated'
    }

    def __init__(self, contacts=None, contract_number=None, created=None, end_date=None, id=None, name=None, property_id=None, start_date=None, type=None, unit_id=None, updated=None):  # noqa: E501
        """ContractDto - a model defined in Swagger"""  # noqa: E501
        self._contacts = None
        self._contract_number = None
        self._created = None
        self._end_date = None
        self._id = None
        self._name = None
        self._property_id = None
        self._start_date = None
        self._type = None
        self._unit_id = None
        self._updated = None
        self.discriminator = None
        if contacts is not None:
            self.contacts = contacts
        if contract_number is not None:
            self.contract_number = contract_number
        if created is not None:
            self.created = created
        if end_date is not None:
            self.end_date = end_date
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if property_id is not None:
            self.property_id = property_id
        if start_date is not None:
            self.start_date = start_date
        if type is not None:
            self.type = type
        if unit_id is not None:
            self.unit_id = unit_id
        if updated is not None:
            self.updated = updated

    @property
    def contacts(self):
        """Gets the contacts of this ContractDto.  # noqa: E501

        List of the contacts associated to the contract.  # noqa: E501

        :return: The contacts of this ContractDto.  # noqa: E501
        :rtype: list[ContactSimpleDto]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this ContractDto.

        List of the contacts associated to the contract.  # noqa: E501

        :param contacts: The contacts of this ContractDto.  # noqa: E501
        :type: list[ContactSimpleDto]
        """

        self._contacts = contacts

    @property
    def contract_number(self):
        """Gets the contract_number of this ContractDto.  # noqa: E501

        Number of the contract.  # noqa: E501

        :return: The contract_number of this ContractDto.  # noqa: E501
        :rtype: str
        """
        return self._contract_number

    @contract_number.setter
    def contract_number(self, contract_number):
        """Sets the contract_number of this ContractDto.

        Number of the contract.  # noqa: E501

        :param contract_number: The contract_number of this ContractDto.  # noqa: E501
        :type: str
        """

        self._contract_number = contract_number

    @property
    def created(self):
        """Gets the created of this ContractDto.  # noqa: E501

        Creation time of the contract.  # noqa: E501

        :return: The created of this ContractDto.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ContractDto.

        Creation time of the contract.  # noqa: E501

        :param created: The created of this ContractDto.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def end_date(self):
        """Gets the end_date of this ContractDto.  # noqa: E501

        Date the validity period of the contract ends to. Null is interpreted as end of time.  # noqa: E501

        :return: The end_date of this ContractDto.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ContractDto.

        Date the validity period of the contract ends to. Null is interpreted as end of time.  # noqa: E501

        :param end_date: The end_date of this ContractDto.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def id(self):
        """Gets the id of this ContractDto.  # noqa: E501

        ID of the contract instance.  # noqa: E501

        :return: The id of this ContractDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContractDto.

        ID of the contract instance.  # noqa: E501

        :param id: The id of this ContractDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ContractDto.  # noqa: E501

        Name of the contract consisting of the unit key and name of the mailing contact.  # noqa: E501

        :return: The name of this ContractDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContractDto.

        Name of the contract consisting of the unit key and name of the mailing contact.  # noqa: E501

        :param name: The name of this ContractDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def property_id(self):
        """Gets the property_id of this ContractDto.  # noqa: E501

        ID of the property instance the contract belongs to.  # noqa: E501

        :return: The property_id of this ContractDto.  # noqa: E501
        :rtype: int
        """
        return self._property_id

    @property_id.setter
    def property_id(self, property_id):
        """Sets the property_id of this ContractDto.

        ID of the property instance the contract belongs to.  # noqa: E501

        :param property_id: The property_id of this ContractDto.  # noqa: E501
        :type: int
        """

        self._property_id = property_id

    @property
    def start_date(self):
        """Gets the start_date of this ContractDto.  # noqa: E501

        Date the validity period of the contract starts from. Null is interpreted as beginning of time.  # noqa: E501

        :return: The start_date of this ContractDto.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ContractDto.

        Date the validity period of the contract starts from. Null is interpreted as beginning of time.  # noqa: E501

        :param start_date: The start_date of this ContractDto.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def type(self):
        """Gets the type of this ContractDto.  # noqa: E501

        Type of the contract.  1. OWNER - a contract of such type proves ownership of the unit.  2. TENANT - represents an agreement between a unit owner and a tenant.  3. TENANT_VACANCY - used for vacancy periods of a unit.  4. PROPERTY_OWNER - a contract of such type proves ownership of the property.  # noqa: E501

        :return: The type of this ContractDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ContractDto.

        Type of the contract.  1. OWNER - a contract of such type proves ownership of the unit.  2. TENANT - represents an agreement between a unit owner and a tenant.  3. TENANT_VACANCY - used for vacancy periods of a unit.  4. PROPERTY_OWNER - a contract of such type proves ownership of the property.  # noqa: E501

        :param type: The type of this ContractDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["OWNER", "TENANT", "TENANT_VACANCY", "PROPERTY_OWNER"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def unit_id(self):
        """Gets the unit_id of this ContractDto.  # noqa: E501

        ID of the unit instance the contract belongs to.  # noqa: E501

        :return: The unit_id of this ContractDto.  # noqa: E501
        :rtype: int
        """
        return self._unit_id

    @unit_id.setter
    def unit_id(self, unit_id):
        """Sets the unit_id of this ContractDto.

        ID of the unit instance the contract belongs to.  # noqa: E501

        :param unit_id: The unit_id of this ContractDto.  # noqa: E501
        :type: int
        """

        self._unit_id = unit_id

    @property
    def updated(self):
        """Gets the updated of this ContractDto.  # noqa: E501

        Last update time of the contract.  # noqa: E501

        :return: The updated of this ContractDto.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this ContractDto.

        Last update time of the contract.  # noqa: E501

        :param updated: The updated of this ContractDto.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContractDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContractDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
