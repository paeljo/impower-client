# coding: utf-8

"""
    Impower ERP

     # Setup  Enquire a `Bearer Token` from Api Support  # Authentication  Use API calls with an `Authorization: Bearer TOKEN` header  # Webhooks  The application supports sending secured notification events to registered endpoints.  The events one may receive are sent as  ``` POST https://your.webhook.url/path/somewhere Authorization: Bearer TOKEN  {   \"connectionId\": 0,   \"entityType\": \"properties|contacts|invoices|etc.\",   \"entityId\": 0,   \"eventType\": \"CREATE|UPDATE|DELETE\" } ```  <!-- Style overrides --> <style> code {   display: block; } </style>   # noqa: E501

    OpenAPI spec version: 2.201.52181d67
    Contact: support+api@impower.de
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InvoiceUpdateDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'issued_date': 'str',
        'name': 'str'
    }

    attribute_map = {
        'issued_date': 'issuedDate',
        'name': 'name'
    }

    def __init__(self, issued_date=None, name=None):  # noqa: E501
        """InvoiceUpdateDto - a model defined in Swagger"""  # noqa: E501
        self._issued_date = None
        self._name = None
        self.discriminator = None
        if issued_date is not None:
            self.issued_date = issued_date
        if name is not None:
            self.name = name

    @property
    def issued_date(self):
        """Gets the issued_date of this InvoiceUpdateDto.  # noqa: E501

        New issued date of the invoice.  # noqa: E501

        :return: The issued_date of this InvoiceUpdateDto.  # noqa: E501
        :rtype: str
        """
        return self._issued_date

    @issued_date.setter
    def issued_date(self, issued_date):
        """Sets the issued_date of this InvoiceUpdateDto.

        New issued date of the invoice.  # noqa: E501

        :param issued_date: The issued_date of this InvoiceUpdateDto.  # noqa: E501
        :type: str
        """

        self._issued_date = issued_date

    @property
    def name(self):
        """Gets the name of this InvoiceUpdateDto.  # noqa: E501

        New name of the invoice.  # noqa: E501

        :return: The name of this InvoiceUpdateDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InvoiceUpdateDto.

        New name of the invoice.  # noqa: E501

        :param name: The name of this InvoiceUpdateDto.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvoiceUpdateDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoiceUpdateDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
