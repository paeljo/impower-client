# coding: utf-8

"""
    Impower ERP

     # Setup  Enquire a `Bearer Token` from Api Support  # Authentication  Use API calls with an `Authorization: Bearer TOKEN` header  # Webhooks  The application supports sending secured notification events to registered endpoints.  The events one may receive are sent as  ``` POST https://your.webhook.url/path/somewhere Authorization: Bearer TOKEN  {   \"connectionId\": 0,   \"entityType\": \"properties|contacts|invoices|etc.\",   \"entityId\": 0,   \"eventType\": \"CREATE|UPDATE|DELETE\" } ```  <!-- Style overrides --> <style> code {   display: block; } </style>   # noqa: E501

    OpenAPI spec version: 2.201.52181d67
    Contact: support+api@impower.de
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContactDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'city': 'str',
        'company_name': 'str',
        'country': 'str',
        'created': 'datetime',
        'details': 'ContactDetailsDto',
        'first_name': 'str',
        'id': 'int',
        'last_name': 'str',
        'number': 'str',
        'postal_code': 'str',
        'recipient_name': 'str',
        'salutation': 'str',
        'state': 'str',
        'street': 'str',
        'title': 'str',
        'updated': 'datetime'
    }

    attribute_map = {
        'city': 'city',
        'company_name': 'companyName',
        'country': 'country',
        'created': 'created',
        'details': 'details',
        'first_name': 'firstName',
        'id': 'id',
        'last_name': 'lastName',
        'number': 'number',
        'postal_code': 'postalCode',
        'recipient_name': 'recipientName',
        'salutation': 'salutation',
        'state': 'state',
        'street': 'street',
        'title': 'title',
        'updated': 'updated'
    }

    def __init__(self, city=None, company_name=None, country=None, created=None, details=None, first_name=None, id=None, last_name=None, number=None, postal_code=None, recipient_name=None, salutation=None, state=None, street=None, title=None, updated=None):  # noqa: E501
        """ContactDto - a model defined in Swagger"""  # noqa: E501
        self._city = None
        self._company_name = None
        self._country = None
        self._created = None
        self._details = None
        self._first_name = None
        self._id = None
        self._last_name = None
        self._number = None
        self._postal_code = None
        self._recipient_name = None
        self._salutation = None
        self._state = None
        self._street = None
        self._title = None
        self._updated = None
        self.discriminator = None
        if city is not None:
            self.city = city
        if company_name is not None:
            self.company_name = company_name
        if country is not None:
            self.country = country
        if created is not None:
            self.created = created
        if details is not None:
            self.details = details
        if first_name is not None:
            self.first_name = first_name
        if id is not None:
            self.id = id
        if last_name is not None:
            self.last_name = last_name
        if number is not None:
            self.number = number
        if postal_code is not None:
            self.postal_code = postal_code
        if recipient_name is not None:
            self.recipient_name = recipient_name
        if salutation is not None:
            self.salutation = salutation
        if state is not None:
            self.state = state
        if street is not None:
            self.street = street
        if title is not None:
            self.title = title
        if updated is not None:
            self.updated = updated

    @property
    def city(self):
        """Gets the city of this ContactDto.  # noqa: E501

        Name of the city.  # noqa: E501

        :return: The city of this ContactDto.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ContactDto.

        Name of the city.  # noqa: E501

        :param city: The city of this ContactDto.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def company_name(self):
        """Gets the company_name of this ContactDto.  # noqa: E501

        Name of the company, in case the contact is a company.  # noqa: E501

        :return: The company_name of this ContactDto.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this ContactDto.

        Name of the company, in case the contact is a company.  # noqa: E501

        :param company_name: The company_name of this ContactDto.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def country(self):
        """Gets the country of this ContactDto.  # noqa: E501

        Country code according to ISO 3166-1 alpha-2 standard.  # noqa: E501

        :return: The country of this ContactDto.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ContactDto.

        Country code according to ISO 3166-1 alpha-2 standard.  # noqa: E501

        :param country: The country of this ContactDto.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def created(self):
        """Gets the created of this ContactDto.  # noqa: E501

        Creation time of the contact.  # noqa: E501

        :return: The created of this ContactDto.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ContactDto.

        Creation time of the contact.  # noqa: E501

        :param created: The created of this ContactDto.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def details(self):
        """Gets the details of this ContactDto.  # noqa: E501


        :return: The details of this ContactDto.  # noqa: E501
        :rtype: ContactDetailsDto
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this ContactDto.


        :param details: The details of this ContactDto.  # noqa: E501
        :type: ContactDetailsDto
        """

        self._details = details

    @property
    def first_name(self):
        """Gets the first_name of this ContactDto.  # noqa: E501

        First name of the contact, in case the contact is a person.  # noqa: E501

        :return: The first_name of this ContactDto.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ContactDto.

        First name of the contact, in case the contact is a person.  # noqa: E501

        :param first_name: The first_name of this ContactDto.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this ContactDto.  # noqa: E501

        ID of the contact instance.  # noqa: E501

        :return: The id of this ContactDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContactDto.

        ID of the contact instance.  # noqa: E501

        :param id: The id of this ContactDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this ContactDto.  # noqa: E501

        Last name of the contact, in case the contact is a person.  # noqa: E501

        :return: The last_name of this ContactDto.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ContactDto.

        Last name of the contact, in case the contact is a person.  # noqa: E501

        :param last_name: The last_name of this ContactDto.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def number(self):
        """Gets the number of this ContactDto.  # noqa: E501

        Street number.  # noqa: E501

        :return: The number of this ContactDto.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this ContactDto.

        Street number.  # noqa: E501

        :param number: The number of this ContactDto.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def postal_code(self):
        """Gets the postal_code of this ContactDto.  # noqa: E501

        Postal or zip code. Ensure it is specified for every person requiring physical letter contact via e-post.  # noqa: E501

        :return: The postal_code of this ContactDto.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this ContactDto.

        Postal or zip code. Ensure it is specified for every person requiring physical letter contact via e-post.  # noqa: E501

        :param postal_code: The postal_code of this ContactDto.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def recipient_name(self):
        """Gets the recipient_name of this ContactDto.  # noqa: E501

        Recipient name of the contact.  # noqa: E501

        :return: The recipient_name of this ContactDto.  # noqa: E501
        :rtype: str
        """
        return self._recipient_name

    @recipient_name.setter
    def recipient_name(self, recipient_name):
        """Sets the recipient_name of this ContactDto.

        Recipient name of the contact.  # noqa: E501

        :param recipient_name: The recipient_name of this ContactDto.  # noqa: E501
        :type: str
        """

        self._recipient_name = recipient_name

    @property
    def salutation(self):
        """Gets the salutation of this ContactDto.  # noqa: E501

        A standard formula of words used to address the contact.  # noqa: E501

        :return: The salutation of this ContactDto.  # noqa: E501
        :rtype: str
        """
        return self._salutation

    @salutation.setter
    def salutation(self, salutation):
        """Sets the salutation of this ContactDto.

        A standard formula of words used to address the contact.  # noqa: E501

        :param salutation: The salutation of this ContactDto.  # noqa: E501
        :type: str
        """

        self._salutation = salutation

    @property
    def state(self):
        """Gets the state of this ContactDto.  # noqa: E501

        State name, also called province, subdivision, or region.  # noqa: E501

        :return: The state of this ContactDto.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ContactDto.

        State name, also called province, subdivision, or region.  # noqa: E501

        :param state: The state of this ContactDto.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def street(self):
        """Gets the street of this ContactDto.  # noqa: E501

        Name of the street.  # noqa: E501

        :return: The street of this ContactDto.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this ContactDto.

        Name of the street.  # noqa: E501

        :param street: The street of this ContactDto.  # noqa: E501
        :type: str
        """

        self._street = street

    @property
    def title(self):
        """Gets the title of this ContactDto.  # noqa: E501

        Job title of the contact.  # noqa: E501

        :return: The title of this ContactDto.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ContactDto.

        Job title of the contact.  # noqa: E501

        :param title: The title of this ContactDto.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def updated(self):
        """Gets the updated of this ContactDto.  # noqa: E501

        Last update time of the contact.  # noqa: E501

        :return: The updated of this ContactDto.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this ContactDto.

        Last update time of the contact.  # noqa: E501

        :param updated: The updated of this ContactDto.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContactDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
