# coding: utf-8

"""
    Impower ERP

     # Setup  Enquire a `Bearer Token` from Api Support  # Authentication  Use API calls with an `Authorization: Bearer TOKEN` header  # Webhooks  The application supports sending secured notification events to registered endpoints.  The events one may receive are sent as  ``` POST https://your.webhook.url/path/somewhere Authorization: Bearer TOKEN  {   \"connectionId\": 0,   \"entityType\": \"properties|contacts|invoices|etc.\",   \"entityId\": 0,   \"eventType\": \"CREATE|UPDATE|DELETE\" } ```  <!-- Style overrides --> <style> code {   display: block; } </style>   # noqa: E501

    OpenAPI spec version: 2.201.52181d67
    Contact: support+api@impower.de
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DocumentDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'building_id': 'int',
        'contact_id': 'int',
        'contract_id': 'int',
        'created': 'datetime',
        'id': 'int',
        'issued_date': 'str',
        'name': 'str',
        'property_hr_id': 'str',
        'property_id': 'int',
        'property_name': 'str',
        'source_id': 'int',
        'source_type': 'str',
        'state': 'str',
        'tags': 'list[DocumentTagSimpleDto]',
        'unit_hr_id': 'str',
        'unit_id': 'int',
        'updated': 'datetime'
    }

    attribute_map = {
        'amount': 'amount',
        'building_id': 'buildingId',
        'contact_id': 'contactId',
        'contract_id': 'contractId',
        'created': 'created',
        'id': 'id',
        'issued_date': 'issuedDate',
        'name': 'name',
        'property_hr_id': 'propertyHrId',
        'property_id': 'propertyId',
        'property_name': 'propertyName',
        'source_id': 'sourceId',
        'source_type': 'sourceType',
        'state': 'state',
        'tags': 'tags',
        'unit_hr_id': 'unitHrId',
        'unit_id': 'unitId',
        'updated': 'updated'
    }

    def __init__(self, amount=None, building_id=None, contact_id=None, contract_id=None, created=None, id=None, issued_date=None, name=None, property_hr_id=None, property_id=None, property_name=None, source_id=None, source_type=None, state=None, tags=None, unit_hr_id=None, unit_id=None, updated=None):  # noqa: E501
        """DocumentDto - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._building_id = None
        self._contact_id = None
        self._contract_id = None
        self._created = None
        self._id = None
        self._issued_date = None
        self._name = None
        self._property_hr_id = None
        self._property_id = None
        self._property_name = None
        self._source_id = None
        self._source_type = None
        self._state = None
        self._tags = None
        self._unit_hr_id = None
        self._unit_id = None
        self._updated = None
        self.discriminator = None
        if amount is not None:
            self.amount = amount
        if building_id is not None:
            self.building_id = building_id
        if contact_id is not None:
            self.contact_id = contact_id
        if contract_id is not None:
            self.contract_id = contract_id
        if created is not None:
            self.created = created
        if id is not None:
            self.id = id
        if issued_date is not None:
            self.issued_date = issued_date
        if name is not None:
            self.name = name
        if property_hr_id is not None:
            self.property_hr_id = property_hr_id
        if property_id is not None:
            self.property_id = property_id
        if property_name is not None:
            self.property_name = property_name
        if source_id is not None:
            self.source_id = source_id
        if source_type is not None:
            self.source_type = source_type
        if state is not None:
            self.state = state
        if tags is not None:
            self.tags = tags
        if unit_hr_id is not None:
            self.unit_hr_id = unit_hr_id
        if unit_id is not None:
            self.unit_id = unit_id
        if updated is not None:
            self.updated = updated

    @property
    def amount(self):
        """Gets the amount of this DocumentDto.  # noqa: E501

        Total amount present on the document.  # noqa: E501

        :return: The amount of this DocumentDto.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this DocumentDto.

        Total amount present on the document.  # noqa: E501

        :param amount: The amount of this DocumentDto.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def building_id(self):
        """Gets the building_id of this DocumentDto.  # noqa: E501

        ID of the building the document belongs to.  # noqa: E501

        :return: The building_id of this DocumentDto.  # noqa: E501
        :rtype: int
        """
        return self._building_id

    @building_id.setter
    def building_id(self, building_id):
        """Sets the building_id of this DocumentDto.

        ID of the building the document belongs to.  # noqa: E501

        :param building_id: The building_id of this DocumentDto.  # noqa: E501
        :type: int
        """

        self._building_id = building_id

    @property
    def contact_id(self):
        """Gets the contact_id of this DocumentDto.  # noqa: E501

        ID of the contact the document belongs to.  # noqa: E501

        :return: The contact_id of this DocumentDto.  # noqa: E501
        :rtype: int
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this DocumentDto.

        ID of the contact the document belongs to.  # noqa: E501

        :param contact_id: The contact_id of this DocumentDto.  # noqa: E501
        :type: int
        """

        self._contact_id = contact_id

    @property
    def contract_id(self):
        """Gets the contract_id of this DocumentDto.  # noqa: E501

        ID of the contract the document belongs to.  # noqa: E501

        :return: The contract_id of this DocumentDto.  # noqa: E501
        :rtype: int
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this DocumentDto.

        ID of the contract the document belongs to.  # noqa: E501

        :param contract_id: The contract_id of this DocumentDto.  # noqa: E501
        :type: int
        """

        self._contract_id = contract_id

    @property
    def created(self):
        """Gets the created of this DocumentDto.  # noqa: E501

        Creation time of the document.  # noqa: E501

        :return: The created of this DocumentDto.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this DocumentDto.

        Creation time of the document.  # noqa: E501

        :param created: The created of this DocumentDto.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def id(self):
        """Gets the id of this DocumentDto.  # noqa: E501

        ID of the document instance.  # noqa: E501

        :return: The id of this DocumentDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DocumentDto.

        ID of the document instance.  # noqa: E501

        :param id: The id of this DocumentDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def issued_date(self):
        """Gets the issued_date of this DocumentDto.  # noqa: E501

        Issued date of the document.  # noqa: E501

        :return: The issued_date of this DocumentDto.  # noqa: E501
        :rtype: str
        """
        return self._issued_date

    @issued_date.setter
    def issued_date(self, issued_date):
        """Sets the issued_date of this DocumentDto.

        Issued date of the document.  # noqa: E501

        :param issued_date: The issued_date of this DocumentDto.  # noqa: E501
        :type: str
        """

        self._issued_date = issued_date

    @property
    def name(self):
        """Gets the name of this DocumentDto.  # noqa: E501

        Name of the document instance.  # noqa: E501

        :return: The name of this DocumentDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DocumentDto.

        Name of the document instance.  # noqa: E501

        :param name: The name of this DocumentDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def property_hr_id(self):
        """Gets the property_hr_id of this DocumentDto.  # noqa: E501

        Human readable id of the property the document is assigned to.  # noqa: E501

        :return: The property_hr_id of this DocumentDto.  # noqa: E501
        :rtype: str
        """
        return self._property_hr_id

    @property_hr_id.setter
    def property_hr_id(self, property_hr_id):
        """Sets the property_hr_id of this DocumentDto.

        Human readable id of the property the document is assigned to.  # noqa: E501

        :param property_hr_id: The property_hr_id of this DocumentDto.  # noqa: E501
        :type: str
        """

        self._property_hr_id = property_hr_id

    @property
    def property_id(self):
        """Gets the property_id of this DocumentDto.  # noqa: E501

        ID of the property the document belongs to.  # noqa: E501

        :return: The property_id of this DocumentDto.  # noqa: E501
        :rtype: int
        """
        return self._property_id

    @property_id.setter
    def property_id(self, property_id):
        """Sets the property_id of this DocumentDto.

        ID of the property the document belongs to.  # noqa: E501

        :param property_id: The property_id of this DocumentDto.  # noqa: E501
        :type: int
        """

        self._property_id = property_id

    @property
    def property_name(self):
        """Gets the property_name of this DocumentDto.  # noqa: E501

        Name of the property the document is assigned to.  # noqa: E501

        :return: The property_name of this DocumentDto.  # noqa: E501
        :rtype: str
        """
        return self._property_name

    @property_name.setter
    def property_name(self, property_name):
        """Sets the property_name of this DocumentDto.

        Name of the property the document is assigned to.  # noqa: E501

        :param property_name: The property_name of this DocumentDto.  # noqa: E501
        :type: str
        """

        self._property_name = property_name

    @property
    def source_id(self):
        """Gets the source_id of this DocumentDto.  # noqa: E501

        ID of the source entity the document belongs to.  # noqa: E501

        :return: The source_id of this DocumentDto.  # noqa: E501
        :rtype: int
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this DocumentDto.

        ID of the source entity the document belongs to.  # noqa: E501

        :param source_id: The source_id of this DocumentDto.  # noqa: E501
        :type: int
        """

        self._source_id = source_id

    @property
    def source_type(self):
        """Gets the source_type of this DocumentDto.  # noqa: E501

        Source type of the document. Together with the id identifies the business process of the same name the document originates from/is attached to. It may be null.  # noqa: E501

        :return: The source_type of this DocumentDto.  # noqa: E501
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this DocumentDto.

        Source type of the document. Together with the id identifies the business process of the same name the document originates from/is attached to. It may be null.  # noqa: E501

        :param source_type: The source_type of this DocumentDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["HOUSE_MONEY_SETTLEMENT", "ECONOMIC_PLAN", "BANK_ORDER", "BANK_TRANSACTION", "HEATING_COST_DISTRIBUTION", "INVOICE", "SERIAL_LETTER", "OWNERS_MEETING_INVITATION", "OWNERS_MEETING_PROTOCOL", "PROFIT_AND_LOSS", "OPS_COST_REPORT", "SPECIAL_CONTRIBUTION", "DUNNING_ANNEX", "DUNNING", "DUNNING_DD_MANDATE", "WATERMARK", "MESSAGE", "OTHER"]  # noqa: E501
        if source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_type` ({0}), must be one of {1}"  # noqa: E501
                .format(source_type, allowed_values)
            )

        self._source_type = source_type

    @property
    def state(self):
        """Gets the state of this DocumentDto.  # noqa: E501

        State of the document.  # noqa: E501

        :return: The state of this DocumentDto.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DocumentDto.

        State of the document.  # noqa: E501

        :param state: The state of this DocumentDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["DRAFT", "GENERATING", "READY", "FAILED", "DELETED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def tags(self):
        """Gets the tags of this DocumentDto.  # noqa: E501


        :return: The tags of this DocumentDto.  # noqa: E501
        :rtype: list[DocumentTagSimpleDto]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DocumentDto.


        :param tags: The tags of this DocumentDto.  # noqa: E501
        :type: list[DocumentTagSimpleDto]
        """

        self._tags = tags

    @property
    def unit_hr_id(self):
        """Gets the unit_hr_id of this DocumentDto.  # noqa: E501

        Human readable id of the unit the document is assigned to.  # noqa: E501

        :return: The unit_hr_id of this DocumentDto.  # noqa: E501
        :rtype: str
        """
        return self._unit_hr_id

    @unit_hr_id.setter
    def unit_hr_id(self, unit_hr_id):
        """Sets the unit_hr_id of this DocumentDto.

        Human readable id of the unit the document is assigned to.  # noqa: E501

        :param unit_hr_id: The unit_hr_id of this DocumentDto.  # noqa: E501
        :type: str
        """

        self._unit_hr_id = unit_hr_id

    @property
    def unit_id(self):
        """Gets the unit_id of this DocumentDto.  # noqa: E501

        ID of the unit the document belongs to.  # noqa: E501

        :return: The unit_id of this DocumentDto.  # noqa: E501
        :rtype: int
        """
        return self._unit_id

    @unit_id.setter
    def unit_id(self, unit_id):
        """Sets the unit_id of this DocumentDto.

        ID of the unit the document belongs to.  # noqa: E501

        :param unit_id: The unit_id of this DocumentDto.  # noqa: E501
        :type: int
        """

        self._unit_id = unit_id

    @property
    def updated(self):
        """Gets the updated of this DocumentDto.  # noqa: E501

        Last update time of the document.  # noqa: E501

        :return: The updated of this DocumentDto.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this DocumentDto.

        Last update time of the document.  # noqa: E501

        :param updated: The updated of this DocumentDto.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocumentDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
