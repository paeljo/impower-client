# coding: utf-8

"""
    Impower ERP

     # Setup  Enquire a `Bearer Token` from Api Support  # Authentication  Use API calls with an `Authorization: Bearer TOKEN` header  # Webhooks  The application supports sending secured notification events to registered endpoints.  The events one may receive are sent as  ``` POST https://your.webhook.url/path/somewhere Authorization: Bearer TOKEN  {   \"connectionId\": 0,   \"entityType\": \"properties|contacts|invoices|etc.\",   \"entityId\": 0,   \"eventType\": \"CREATE|UPDATE|DELETE\" } ```  <!-- Style overrides --> <style> code {   display: block; } </style>   # noqa: E501

    OpenAPI spec version: 2.201.52181d67
    Contact: support+api@impower.de
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContactDetailsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'business_phone_number': 'list[str]',
        'date_of_birth': 'str',
        'email': 'list[str]',
        'fax': 'list[str]',
        'mobile_phone_number': 'list[str]',
        'private_phone_number': 'list[str]',
        'trade_register_number': 'str',
        'vat_id': 'str',
        'website': 'list[str]'
    }

    attribute_map = {
        'business_phone_number': 'businessPhoneNumber',
        'date_of_birth': 'dateOfBirth',
        'email': 'email',
        'fax': 'fax',
        'mobile_phone_number': 'mobilePhoneNumber',
        'private_phone_number': 'privatePhoneNumber',
        'trade_register_number': 'tradeRegisterNumber',
        'vat_id': 'vatId',
        'website': 'website'
    }

    def __init__(self, business_phone_number=None, date_of_birth=None, email=None, fax=None, mobile_phone_number=None, private_phone_number=None, trade_register_number=None, vat_id=None, website=None):  # noqa: E501
        """ContactDetailsDto - a model defined in Swagger"""  # noqa: E501
        self._business_phone_number = None
        self._date_of_birth = None
        self._email = None
        self._fax = None
        self._mobile_phone_number = None
        self._private_phone_number = None
        self._trade_register_number = None
        self._vat_id = None
        self._website = None
        self.discriminator = None
        if business_phone_number is not None:
            self.business_phone_number = business_phone_number
        if date_of_birth is not None:
            self.date_of_birth = date_of_birth
        if email is not None:
            self.email = email
        if fax is not None:
            self.fax = fax
        if mobile_phone_number is not None:
            self.mobile_phone_number = mobile_phone_number
        if private_phone_number is not None:
            self.private_phone_number = private_phone_number
        if trade_register_number is not None:
            self.trade_register_number = trade_register_number
        if vat_id is not None:
            self.vat_id = vat_id
        if website is not None:
            self.website = website

    @property
    def business_phone_number(self):
        """Gets the business_phone_number of this ContactDetailsDto.  # noqa: E501

        Business telephone number of the contact  # noqa: E501

        :return: The business_phone_number of this ContactDetailsDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._business_phone_number

    @business_phone_number.setter
    def business_phone_number(self, business_phone_number):
        """Sets the business_phone_number of this ContactDetailsDto.

        Business telephone number of the contact  # noqa: E501

        :param business_phone_number: The business_phone_number of this ContactDetailsDto.  # noqa: E501
        :type: list[str]
        """

        self._business_phone_number = business_phone_number

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this ContactDetailsDto.  # noqa: E501

        Date of birth of the contact.  # noqa: E501

        :return: The date_of_birth of this ContactDetailsDto.  # noqa: E501
        :rtype: str
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this ContactDetailsDto.

        Date of birth of the contact.  # noqa: E501

        :param date_of_birth: The date_of_birth of this ContactDetailsDto.  # noqa: E501
        :type: str
        """

        self._date_of_birth = date_of_birth

    @property
    def email(self):
        """Gets the email of this ContactDetailsDto.  # noqa: E501

        Email address of the contact  # noqa: E501

        :return: The email of this ContactDetailsDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ContactDetailsDto.

        Email address of the contact  # noqa: E501

        :param email: The email of this ContactDetailsDto.  # noqa: E501
        :type: list[str]
        """

        self._email = email

    @property
    def fax(self):
        """Gets the fax of this ContactDetailsDto.  # noqa: E501

        Fax number of the contact  # noqa: E501

        :return: The fax of this ContactDetailsDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """Sets the fax of this ContactDetailsDto.

        Fax number of the contact  # noqa: E501

        :param fax: The fax of this ContactDetailsDto.  # noqa: E501
        :type: list[str]
        """

        self._fax = fax

    @property
    def mobile_phone_number(self):
        """Gets the mobile_phone_number of this ContactDetailsDto.  # noqa: E501

        Mobile telephone number of the contact  # noqa: E501

        :return: The mobile_phone_number of this ContactDetailsDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._mobile_phone_number

    @mobile_phone_number.setter
    def mobile_phone_number(self, mobile_phone_number):
        """Sets the mobile_phone_number of this ContactDetailsDto.

        Mobile telephone number of the contact  # noqa: E501

        :param mobile_phone_number: The mobile_phone_number of this ContactDetailsDto.  # noqa: E501
        :type: list[str]
        """

        self._mobile_phone_number = mobile_phone_number

    @property
    def private_phone_number(self):
        """Gets the private_phone_number of this ContactDetailsDto.  # noqa: E501

        Private telephone number of the contact  # noqa: E501

        :return: The private_phone_number of this ContactDetailsDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._private_phone_number

    @private_phone_number.setter
    def private_phone_number(self, private_phone_number):
        """Sets the private_phone_number of this ContactDetailsDto.

        Private telephone number of the contact  # noqa: E501

        :param private_phone_number: The private_phone_number of this ContactDetailsDto.  # noqa: E501
        :type: list[str]
        """

        self._private_phone_number = private_phone_number

    @property
    def trade_register_number(self):
        """Gets the trade_register_number of this ContactDetailsDto.  # noqa: E501

        Trade register number.  # noqa: E501

        :return: The trade_register_number of this ContactDetailsDto.  # noqa: E501
        :rtype: str
        """
        return self._trade_register_number

    @trade_register_number.setter
    def trade_register_number(self, trade_register_number):
        """Sets the trade_register_number of this ContactDetailsDto.

        Trade register number.  # noqa: E501

        :param trade_register_number: The trade_register_number of this ContactDetailsDto.  # noqa: E501
        :type: str
        """

        self._trade_register_number = trade_register_number

    @property
    def vat_id(self):
        """Gets the vat_id of this ContactDetailsDto.  # noqa: E501

        VAT id of the contact.  # noqa: E501

        :return: The vat_id of this ContactDetailsDto.  # noqa: E501
        :rtype: str
        """
        return self._vat_id

    @vat_id.setter
    def vat_id(self, vat_id):
        """Sets the vat_id of this ContactDetailsDto.

        VAT id of the contact.  # noqa: E501

        :param vat_id: The vat_id of this ContactDetailsDto.  # noqa: E501
        :type: str
        """

        self._vat_id = vat_id

    @property
    def website(self):
        """Gets the website of this ContactDetailsDto.  # noqa: E501

        Website of the contact  # noqa: E501

        :return: The website of this ContactDetailsDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this ContactDetailsDto.

        Website of the contact  # noqa: E501

        :param website: The website of this ContactDetailsDto.  # noqa: E501
        :type: list[str]
        """

        self._website = website

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContactDetailsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactDetailsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
