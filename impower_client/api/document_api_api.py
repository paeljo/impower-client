# coding: utf-8

"""
    Impower ERP

     # Setup  Enquire a `Bearer Token` from Api Support  # Authentication  Use API calls with an `Authorization: Bearer TOKEN` header  # Webhooks  The application supports sending secured notification events to registered endpoints.  The events one may receive are sent as  ``` POST https://your.webhook.url/path/somewhere Authorization: Bearer TOKEN  {   \"connectionId\": 0,   \"entityType\": \"properties|contacts|invoices|etc.\",   \"entityId\": 0,   \"eventType\": \"CREATE|UPDATE|DELETE\" } ```  <!-- Style overrides --> <style> code {   display: block; } </style>   # noqa: E501

    OpenAPI spec version: 2.201.52181d67
    Contact: support+api@impower.de
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from impower_client.api_client import ApiClient


class DocumentAPIApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_document_by_upload_using_post(self, file, **kwargs):  # noqa: E501
        """Create a new document based on given the file  # noqa: E501

        The newly created document will be returned as response  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_document_by_upload_using_post(file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file: (required)
        :return: DocumentDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_document_by_upload_using_post_with_http_info(file, **kwargs)  # noqa: E501
        else:
            (data) = self.create_document_by_upload_using_post_with_http_info(file, **kwargs)  # noqa: E501
            return data

    def create_document_by_upload_using_post_with_http_info(self, file, **kwargs):  # noqa: E501
        """Create a new document based on given the file  # noqa: E501

        The newly created document will be returned as response  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_document_by_upload_using_post_with_http_info(file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file: (required)
        :return: DocumentDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_document_by_upload_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `create_document_by_upload_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/documents/upload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DocumentDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_document_using_delete(self, document_id, **kwargs):  # noqa: E501
        """Delete an existing document based on the given id  # noqa: E501

        System generated documents cannot be deleted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_document_using_delete(document_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int document_id: documentId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_document_using_delete_with_http_info(document_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_document_using_delete_with_http_info(document_id, **kwargs)  # noqa: E501
            return data

    def delete_document_using_delete_with_http_info(self, document_id, **kwargs):  # noqa: E501
        """Delete an existing document based on the given id  # noqa: E501

        System generated documents cannot be deleted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_document_using_delete_with_http_info(document_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int document_id: documentId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['document_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_document_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'document_id' is set
        if ('document_id' not in params or
                params['document_id'] is None):
            raise ValueError("Missing the required parameter `document_id` when calling `delete_document_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'document_id' in params:
            path_params['documentId'] = params['document_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['API Key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/documents/{documentId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_documents_by_filter_using_get(self, **kwargs):  # noqa: E501
        """Download multiple documents by given filter conditions  # noqa: E501

        Documents come in zip format  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_documents_by_filter_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accountant: Accountant name of the property.
        :param str administrator: Administrator name of the property.
        :param str contract_name: Documents linked to contracts with similar name.
        :param list[int] document_ids: IDs of the documents to be returned.
        :param str document_name: Name of the documents to be returned.
        :param str issued_date: Issued date of the document.
        :param str max_issued_date: Documents having issued date before.
        :param str min_issued_date: Documents having issued date after.
        :param str property_hr_id: Human readable id of the property the document belongs to.
        :param int property_id: ID of the property the document belongs to.
        :param str property_name: Name of the property the document belongs to.
        :param int source_id: ID of the source entity the document belongs to.
        :param list[str] source_type: Source types of the document.
        :param list[int] tag_ids: IDs of tags the document is associated to.
        :param str tag_name: Similar name of tag the document is associate to.
        :param int unit_id: ID of the unit entity the document belongs to.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_documents_by_filter_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.download_documents_by_filter_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def download_documents_by_filter_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """Download multiple documents by given filter conditions  # noqa: E501

        Documents come in zip format  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_documents_by_filter_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accountant: Accountant name of the property.
        :param str administrator: Administrator name of the property.
        :param str contract_name: Documents linked to contracts with similar name.
        :param list[int] document_ids: IDs of the documents to be returned.
        :param str document_name: Name of the documents to be returned.
        :param str issued_date: Issued date of the document.
        :param str max_issued_date: Documents having issued date before.
        :param str min_issued_date: Documents having issued date after.
        :param str property_hr_id: Human readable id of the property the document belongs to.
        :param int property_id: ID of the property the document belongs to.
        :param str property_name: Name of the property the document belongs to.
        :param int source_id: ID of the source entity the document belongs to.
        :param list[str] source_type: Source types of the document.
        :param list[int] tag_ids: IDs of tags the document is associated to.
        :param str tag_name: Similar name of tag the document is associate to.
        :param int unit_id: ID of the unit entity the document belongs to.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accountant', 'administrator', 'contract_name', 'document_ids', 'document_name', 'issued_date', 'max_issued_date', 'min_issued_date', 'property_hr_id', 'property_id', 'property_name', 'source_id', 'source_type', 'tag_ids', 'tag_name', 'unit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_documents_by_filter_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'accountant' in params:
            query_params.append(('accountant', params['accountant']))  # noqa: E501
        if 'administrator' in params:
            query_params.append(('administrator', params['administrator']))  # noqa: E501
        if 'contract_name' in params:
            query_params.append(('contractName', params['contract_name']))  # noqa: E501
        if 'document_ids' in params:
            query_params.append(('documentIds', params['document_ids']))  # noqa: E501
            collection_formats['documentIds'] = 'multi'  # noqa: E501
        if 'document_name' in params:
            query_params.append(('documentName', params['document_name']))  # noqa: E501
        if 'issued_date' in params:
            query_params.append(('issuedDate', params['issued_date']))  # noqa: E501
        if 'max_issued_date' in params:
            query_params.append(('maxIssuedDate', params['max_issued_date']))  # noqa: E501
        if 'min_issued_date' in params:
            query_params.append(('minIssuedDate', params['min_issued_date']))  # noqa: E501
        if 'property_hr_id' in params:
            query_params.append(('propertyHrId', params['property_hr_id']))  # noqa: E501
        if 'property_id' in params:
            query_params.append(('propertyId', params['property_id']))  # noqa: E501
        if 'property_name' in params:
            query_params.append(('propertyName', params['property_name']))  # noqa: E501
        if 'source_id' in params:
            query_params.append(('sourceId', params['source_id']))  # noqa: E501
        if 'source_type' in params:
            query_params.append(('sourceType', params['source_type']))  # noqa: E501
            collection_formats['sourceType'] = 'multi'  # noqa: E501
        if 'tag_ids' in params:
            query_params.append(('tagIds', params['tag_ids']))  # noqa: E501
            collection_formats['tagIds'] = 'multi'  # noqa: E501
        if 'tag_name' in params:
            query_params.append(('tagName', params['tag_name']))  # noqa: E501
        if 'unit_id' in params:
            query_params.append(('unitId', params['unit_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/documents/download-zip', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_using_get(self, document_id, **kwargs):  # noqa: E501
        """Download a single document by given id  # noqa: E501

        Format of the document is PDF  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_using_get(document_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int document_id: Unique identifier of a document (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_using_get_with_http_info(document_id, **kwargs)  # noqa: E501
        else:
            (data) = self.download_using_get_with_http_info(document_id, **kwargs)  # noqa: E501
            return data

    def download_using_get_with_http_info(self, document_id, **kwargs):  # noqa: E501
        """Download a single document by given id  # noqa: E501

        Format of the document is PDF  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_using_get_with_http_info(document_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int document_id: Unique identifier of a document (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['document_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'document_id' is set
        if ('document_id' not in params or
                params['document_id'] is None):
            raise ValueError("Missing the required parameter `document_id` when calling `download_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'document_id' in params:
            path_params['documentId'] = params['document_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/documents/{documentId}/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_documents_by_filter_using_get(self, **kwargs):  # noqa: E501
        """Get documents by the given filter parameters  # noqa: E501

        Retrieve documents by the given filter parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_documents_by_filter_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accountant: Accountant name of the property.
        :param str administrator: Administrator name of the property.
        :param str contract_name: Documents linked to contracts with similar name.
        :param list[int] document_ids: IDs of the documents to be returned.
        :param str document_name: Name of the documents to be returned.
        :param str issued_date: Issued date of the document.
        :param str max_issued_date: Documents having issued date before.
        :param str min_issued_date: Documents having issued date after.
        :param str order: Sorting direction. Possible values: ASC, DESC
        :param int page: Page number to be returned
        :param str property_hr_id: Human readable id of the property the document belongs to.
        :param int property_id: ID of the property the document belongs to.
        :param str property_name: Name of the property the document belongs to.
        :param int size: Number of items to be returned in single page
        :param str sort: Sorting parameter
        :param int source_id: ID of the source entity the document belongs to.
        :param list[str] source_type: Source types of the document.
        :param list[int] tag_ids: IDs of tags the document is associated to.
        :param str tag_name: Similar name of tag the document is associate to.
        :param int unit_id: ID of the unit entity the document belongs to.
        :return: PageOfDocumentDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_documents_by_filter_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_documents_by_filter_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_documents_by_filter_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get documents by the given filter parameters  # noqa: E501

        Retrieve documents by the given filter parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_documents_by_filter_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accountant: Accountant name of the property.
        :param str administrator: Administrator name of the property.
        :param str contract_name: Documents linked to contracts with similar name.
        :param list[int] document_ids: IDs of the documents to be returned.
        :param str document_name: Name of the documents to be returned.
        :param str issued_date: Issued date of the document.
        :param str max_issued_date: Documents having issued date before.
        :param str min_issued_date: Documents having issued date after.
        :param str order: Sorting direction. Possible values: ASC, DESC
        :param int page: Page number to be returned
        :param str property_hr_id: Human readable id of the property the document belongs to.
        :param int property_id: ID of the property the document belongs to.
        :param str property_name: Name of the property the document belongs to.
        :param int size: Number of items to be returned in single page
        :param str sort: Sorting parameter
        :param int source_id: ID of the source entity the document belongs to.
        :param list[str] source_type: Source types of the document.
        :param list[int] tag_ids: IDs of tags the document is associated to.
        :param str tag_name: Similar name of tag the document is associate to.
        :param int unit_id: ID of the unit entity the document belongs to.
        :return: PageOfDocumentDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accountant', 'administrator', 'contract_name', 'document_ids', 'document_name', 'issued_date', 'max_issued_date', 'min_issued_date', 'order', 'page', 'property_hr_id', 'property_id', 'property_name', 'size', 'sort', 'source_id', 'source_type', 'tag_ids', 'tag_name', 'unit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_documents_by_filter_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'accountant' in params:
            query_params.append(('accountant', params['accountant']))  # noqa: E501
        if 'administrator' in params:
            query_params.append(('administrator', params['administrator']))  # noqa: E501
        if 'contract_name' in params:
            query_params.append(('contractName', params['contract_name']))  # noqa: E501
        if 'document_ids' in params:
            query_params.append(('documentIds', params['document_ids']))  # noqa: E501
            collection_formats['documentIds'] = 'multi'  # noqa: E501
        if 'document_name' in params:
            query_params.append(('documentName', params['document_name']))  # noqa: E501
        if 'issued_date' in params:
            query_params.append(('issuedDate', params['issued_date']))  # noqa: E501
        if 'max_issued_date' in params:
            query_params.append(('maxIssuedDate', params['max_issued_date']))  # noqa: E501
        if 'min_issued_date' in params:
            query_params.append(('minIssuedDate', params['min_issued_date']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'property_hr_id' in params:
            query_params.append(('propertyHrId', params['property_hr_id']))  # noqa: E501
        if 'property_id' in params:
            query_params.append(('propertyId', params['property_id']))  # noqa: E501
        if 'property_name' in params:
            query_params.append(('propertyName', params['property_name']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'source_id' in params:
            query_params.append(('sourceId', params['source_id']))  # noqa: E501
        if 'source_type' in params:
            query_params.append(('sourceType', params['source_type']))  # noqa: E501
            collection_formats['sourceType'] = 'multi'  # noqa: E501
        if 'tag_ids' in params:
            query_params.append(('tagIds', params['tag_ids']))  # noqa: E501
            collection_formats['tagIds'] = 'multi'  # noqa: E501
        if 'tag_name' in params:
            query_params.append(('tagName', params['tag_name']))  # noqa: E501
        if 'unit_id' in params:
            query_params.append(('unitId', params['unit_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/documents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageOfDocumentDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_documents_using_put(self, body, **kwargs):  # noqa: E501
        """Update an existing document based on the given request body  # noqa: E501

        All the need information is in the request body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_documents_using_put(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[DocumentUpdateDto] body: documentUpdateDtos (required)
        :return: list[DocumentDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_documents_using_put_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_documents_using_put_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_documents_using_put_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update an existing document based on the given request body  # noqa: E501

        All the need information is in the request body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_documents_using_put_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[DocumentUpdateDto] body: documentUpdateDtos (required)
        :return: list[DocumentDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_documents_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_documents_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/documents', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DocumentDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
